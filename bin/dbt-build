#!/usr/bin/env python3

import os
import sys

if "DBT_ROOT" in os.environ:
   DBT_ROOT=os.environ["DBT_ROOT"]
else:
    print("Environment variable DBT_ROOT isn't set, which suggests you haven't yet set up the daq-buildtools environment. Exiting...")
    sys.exit(1)

exec(open(f'{DBT_ROOT}/scripts/dbt_setup_constants.py').read())

if sys.prefix == sys.base_prefix:
    sys.stderr.write("\n\033[1;31mYou need your Python virtualenv to be set up for this script to work; have you run \"dbt-workarea-env\" yet?")
    sys.stderr.write("\nSee https://dune-daq-sw.readthedocs.io/en/latest/packages/daq-buildtools/ for details. Exiting...\n\033[1;0m\n")
    sys.exit(1)

import argparse
import io
import multiprocessing
import pathlib
import re
import sh
import shutil
from shutil import rmtree, which
from time import sleep
import rich
import json

sys.path.append(f'{DBT_ROOT}/scripts')

from dbt_setup_tools import error, find_work_area, get_time
import pytee

orig_working_dir=os.getcwd()

def get_package_list( build_dir ) :
    return sh.find(rf"-L {build_dir} -mindepth 1 -maxdepth 1 -type d -not -name CMakeFiles  -printf %f\n".split()).split()


usage_blurb=f"""

Usage
-----

      {os.path.basename(__file__)} [-c/--clean] [-d/--debug] [-j<n>/--jobs <number parallel build jobs>] [--unittest (<optional package name>)] [--lint (<optional package name|optional file name>)] [-v/--cpp-verbose] [-h/--help]

        -c/--clean means the contents of ./build are deleted and CMake's config+generate+build stages are run
        -d/--debug means you want to build your software with optimizations off and debugging info on
        -j/--jobs means you want to specify the number of jobs used by cmake to build the project
        --unittest means that unit test executables found in ./build/<optional package name>/unittest are run, or all unit tests in ./build/*/unittest are run if no package name is provided
        --lint means you check for deviations in ./sourcecode/<optional package name> from the DUNE style guide, https://dune-daq-sw.readthedocs.io/en/latest/packages/styleguide/, or deviations in all local repos if no package name is provided. You can also pass the name of an individual file. 
        -v/--cpp-verbose means that you want verbose output from the compiler
        --cmake-msg-lvl setting "CMAKE_MESSAGE_LOG_LEVEL", default is "NOTICE", choices are ERROR|WARNING|NOTICE|STATUS|VERBOSE|DEBUG|TRACE.
        --optimize-flag takes a gcc optimization flag as argument and passes it through to the build
        --cmake-trace enable cmake tracing
        --cmake-graphviz generates a target dependency graph


    All arguments are optional. With no arguments, CMake will typically just run
    build, unless build/CMakeCache.txt is missing


"""

BASEDIR=find_work_area()
if not os.path.exists(BASEDIR):
    error(f"Work area directory \"{BASEDIR}\" not found. Exiting...")

BUILDDIR=f"{BASEDIR}/build"
LOGDIR=f"{BASEDIR}/log"
SRCDIR=f"{BASEDIR}/sourcecode"

if "DBT_INSTALL_DIR" in os.environ and os.path.exists(os.environ["DBT_INSTALL_DIR"]):
    INSTALLDIR=os.environ["DBT_INSTALL_DIR"]
else:
    error("Either $DBT_INSTALL_DIR isn't set, or it's set but doesn't refer to a real directory. Exiting...")

parser = argparse.ArgumentParser(usage=usage_blurb)
parser.add_argument("-c", "--clean", action="store_true", dest="clean_build", help=argparse.SUPPRESS)
parser.add_argument("-d", "--debug", action="store_true", dest='debug_build', help=argparse.SUPPRESS)
parser.add_argument("-v", "--cpp-verbose", action="store_true", dest='cpp_verbose', help=argparse.SUPPRESS)
parser.add_argument("-j", "--jobs", action='store', type=int, dest='n_jobs', help=argparse.SUPPRESS)
parser.add_argument("--unittest", nargs="?", const="all", help=argparse.SUPPRESS)
parser.add_argument("--lint", nargs="?", const="all", help=argparse.SUPPRESS)
parser.add_argument("--cmake-msg-lvl", dest="cmake_msg_lvl", help=argparse.SUPPRESS)
parser.add_argument("--optimize-flag", dest="optimize_flag", help=argparse.SUPPRESS)
parser.add_argument("--cmake-trace", action="store_true", dest="cmake_trace", help=argparse.SUPPRESS)
parser.add_argument("--cmake-graphviz", action="store_true", dest="cmake_graphviz", help=argparse.SUPPRESS)
parser.add_argument("-y", "--yes-to-all", action="store_true", dest="yes_to_all", help=argparse.SUPPRESS)

args = parser.parse_args()

if args.debug_build and args.optimize_flag:
    error("""
You've passed both a -d/--debug argument and an --optimize-flag argument to this
script; this is not allowed as they both try to set the optimization level of
a gcc build
""")

if args.optimize_flag:
    allowed_flags = [ "O", "O0", "O1", "O2", "O3", "Os", "Ofast", "Og", "Oz" ]
    if args.optimize_flag not in allowed_flags:
        error("Allowed flags to pass to --optimize-flag are {}".format(" ".join(allowed_flags)))

run_tests = False
if args.unittest:
    run_tests=True
    if args.unittest != "all":
        package_to_test = args.unittest

lint = False
if args.lint:
    lint=True
    if args.lint != "all":
        code_to_lint = args.lint

force_clean = False
if args.yes_to_all:
    force_clean = True

if "DBT_WORKAREA_ENV_SCRIPT_SOURCED" not in os.environ:
    error("""
It appears you haven't yet executed "dbt-workarea-env"; please do so before
running this script. Exiting...
    """)

if not os.path.exists(BUILDDIR):
    rich.print(f"[yellow]WARNING: expected build directory \"{BUILDDIR}\" not found. This suggests there may be a problem. Creating \"{BUILDDIR}\"[/yellow]")
    try:
        pathlib.Path(BUILDDIR).mkdir(parents=True)
    except PermissionError:
        error(f"You don't have permission to create {BUILDDIR} from this directory. Exiting...")

os.chdir(BUILDDIR)

if args.clean_build:
    # Want to be damn sure we're in the right directory, recursive directory removal is no joke...
    if os.path.basename(os.getcwd()) == "build":

        if not force_clean:
            rich.print(f"""
    Clean build requested, will delete all the contents of build directory \"{os.getcwd()}\".
    If you wish to abort, you have 5 seconds to hit Ctrl-c"
            """)
            sleep(5)

        for filename in os.listdir(os.getcwd()):
            file_path = os.path.join(os.getcwd(), filename)
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)
            elif os.path.isdir(file_path):
                rmtree(file_path)
    else:
        error(f"""
You requested a clean build, but this script thinks that {os.getcwd()} isn't
a build directory. Please contact John Freeman at jcfree@fnal.gov and notify him of this message.
        """)

def create_app_rte_script():
    res = sh.bash("-c", "source dbt-workarea-env.sh > /dev/null; declare -x | egrep 'declare -x (PATH|.*_SHARE|CET_PLUGIN_PATH|DUNEDAQ_SHARE_PATH|LD_LIBRARY_PATH|LIBRARY_PATH|PYTHONPATH)='")
    with open(f"{INSTALLDIR}/daq_app_rte.sh", "w") as f:
        f.write(str(res))

def erase_installdir_contents():
   if not re.search(r"^/?$", INSTALLDIR):
       for filename in os.listdir(INSTALLDIR):
           file_path = os.path.join(INSTALLDIR, filename)
           if os.path.isfile(file_path) or os.path.islink(file_path):
               os.unlink(file_path)
           elif os.path.isdir(file_path):
               rmtree(file_path)
   else:
       error(f"Installation directory is defined as \"{INSTALLDIR}\", which would result in the deletion of the entire contents of this system if it weren't for this check!!!")


if not get_package_list(SRCDIR):
   print(f"""No package repos have been found in {SRCDIR}, 
so no C++ build will take place. However, a script saving the environment will
be put in {INSTALLDIR}""")
   erase_installdir_contents()
   create_app_rte_script()
   sys.exit(0)

stringio_obj2 = io.StringIO()
sh.date(_out=stringio_obj2)
datestring=re.sub("[: ]+", "_", stringio_obj2.getvalue().strip())

build_log=f"{LOGDIR}/build_attempt_{datestring}.log"

cmake="cmake"
if args.cmake_trace:
    cmake = f"{cmake} --trace"

# We usually only need to explicitly run the CMake configure+generate
# makefiles stages when it hasn't already been successfully run;
# otherwise we can skip to the compilation. We use the existence of
# CMakeCache.txt to tell us whether this has happened; notice that it
# gets renamed if it's produced but there's a failure.

running_config_and_generate=False
cfggentime=None

if not os.path.exists("CMakeCache.txt"):
    running_config_and_generate = True

    found_cvmfs_ninja = False
    try:
        res = re.search(r"^/cvmfs", sh.which("ninja"))
        if res is not None:
           found_cvmfs_ninja = True
    except:
        pass

    if not found_cvmfs_ninja:
        error("Ninja seems to be missing. The \"which ninja\" command did not yield an executable in the /cvmfs area. Exiting...")

    stringio_obj3 = io.StringIO()
    the_which_cmd = sh.Command("which")  # Needed because of a complex alias, at least on mu2edaq
    the_which_cmd("moo", _out=stringio_obj3)  # Will raise helpful exception if moo not found
    moo_path=stringio_obj3.getvalue().strip().split()[-1]

    starttime_cfggen_d=get_time("as_date")
    starttime_cfggen_s=get_time("as_seconds_since_epoch")

    debug_build="false"
    if args.debug_build:
        debug_build="true"

    cmake_msg_lvl="NOTICE"
    if args.cmake_msg_lvl:
        cmake_msg_lvl = args.cmake_msg_lvl

    fullcmd="{} -DCMAKE_POLICY_DEFAULT_CMP0116=OLD -DCMAKE_MESSAGE_LOG_LEVEL={} -DMOO_CMD={} -DDBT_ROOT={} -DDBT_DEBUG={} -DDBT_OPTIMIZE_FLAG={} -DCMAKE_INSTALL_PREFIX={} -G Ninja {}".format(cmake, cmake_msg_lvl, moo_path, os.environ["DBT_ROOT"], debug_build, args.optimize_flag, INSTALLDIR, SRCDIR)

    rich.print(f"Executing '{fullcmd}'")
    retval=pytee.run(fullcmd.split(" ")[0], fullcmd.split(" ")[1:], build_log)

    endtime_cfggen_d=get_time("as_date")
    endtime_cfggen_s=get_time("as_seconds_since_epoch")

    if retval == 0:
        cfggentime=int(endtime_cfggen_s) - int(starttime_cfggen_s)
    else:
        shutil.move("CMakeCache.txt", "CMakeCache.txt.most_recent_failure")

        error(f"""

This script ran into a problem running

{fullcmd}

from {BUILDDIR} (i.e., CMake's build file config+generate stages).
Scroll up for details or look at the build log via

less -R {build_log}

Exiting...

""")

else:
    rich.print(f"The CMake build file config+generate stage was skipped as CMakeCache.txt was already found in {BUILDDIR}")

if args.cmake_graphviz:
    output = sh.cmake(["--graphviz=graphviz/targets.dot", "."])
    sys.exit(output.exit_code)

if args.n_jobs:
    nprocs_argument = f"-j {args.n_jobs}"
else:
    nprocs = -999
    try:
        nprocs = multiprocessing.cpu_count()
    except NotImplementedError:
        error("Unable to determine the number of processors on this system; please supply the \"--jobs <num_processors>\" argument to this script explicitly. Exiting...")

    rich.print(f"This script believes you have {nprocs} processors available on this system, and will use as many of them as it can")

    nprocs_argument = f"-j {nprocs}"

erase_installdir_contents()

starttime_build_d=get_time("as_date")
starttime_build_s=get_time("as_seconds_since_epoch")

build_options=" --target install"

if args.cpp_verbose:
    build_options=f"{build_options} --verbose"

if not args.cmake_trace:
    build_options=f"{build_options} {nprocs_argument}"

fullcmd=f"{cmake} --build . {build_options}"

rich.print(f"Executing '{fullcmd}'")
retval=pytee.run(fullcmd.split(" ")[0], fullcmd.split(" ")[1:], build_log)

endtime_build_d=get_time("as_date")
endtime_build_s=get_time("as_seconds_since_epoch")

if retval == 0:
    buildtime=int(endtime_build_s) - int(starttime_build_s)
else:
    error(f"""
This script ran into a problem running

{fullcmd}

from {BUILDDIR} (i.e.,
CMake's build+install stages). Scroll up for details or look at the build log via

less -R {build_log}

Exiting...
""")

stringio_obj4 = io.StringIO()

try:
    sh.wc(sh.grep("warning: ", build_log), "-l", _out=stringio_obj4)
except sh.ErrorReturnCode_1:
   num_estimated_warnings = 0  # sh.grep("warning: "...) didn't give sh.wc anything
except Exception:
    num_estimated_warnings = -1
else:
   if stringio_obj4.getvalue() is not None:
      num_estimated_warnings=int(stringio_obj4.getvalue().strip())
   else:
      num_estimated_warnings = 0

rich.print("")

create_app_rte_script()

os.chdir(BUILDDIR)

summary_build_info = {}
for pkg in get_package_list(BUILDDIR):
    try:
        with open(f"{INSTALLDIR}/{pkg}/{pkg}_build_info.json") as f:
            fs = f.read()
            mp = [' ' for i in range(32)]
            filter_f = fs.translate(mp)
            summary_build_info[pkg] = json.loads(filter_f)
    except FileNotFoundError:
        rich.print(f"[yellow]WARNING: unable to find build info summary file \"{INSTALLDIR}/{pkg}/{pkg}_build_info.json\"[/yellow]")
        summary_build_info[pkg] = "Build info not available"

with open(f"{INSTALLDIR}/build_summary_info.json", 'w') as sbi_f:
    json.dump( summary_build_info, sbi_f, sort_keys=True, indent=4 )

if run_tests:
    stringio_obj5 = io.StringIO()
    sh.date(_out=stringio_obj5)
    datestring=re.sub("[: ]+", "_", stringio_obj5.getvalue().strip())

    test_log_dir = f"{LOGDIR}/unit_tests_{datestring}"
    test_log_summary = f"{test_log_dir}/unit_test_summary.log"
    os.mkdir(test_log_dir)

    os.chdir(BUILDDIR)

    if args.unittest == "all":
        stringio_obj6 = io.StringIO()
        sh.find("-L . -mindepth 1 -maxdepth 1 -type d -not -name CMakeFiles".split(), _out = stringio_obj6)
        package_list = stringio_obj6.getvalue().split()
    else:
        package_list = [ package_to_test ]

    for pkgname in package_list:
        fullcmd=(f"find -L {BUILDDIR}/{pkgname} -type d -name unittest -not -regex .*CMakeFiles.*")
        stringio_obj7 = io.StringIO()
        sh.find(fullcmd.split()[1:], _out=stringio_obj7)
        unittestdirs = stringio_obj7.getvalue().split()

        if len(unittestdirs) == 0:
            rich.print(f"[red]No unit tests have been written for {pkgname}[/red]", file = sys.stderr)
            continue

        if not "BOOST_TEST_LOG_LEVEL" in os.environ:
            os.environ["BOOST_TEST_LOG_LEVEL"] = "all"

        num_unit_tests = 0

        for unittestdir in unittestdirs:
            rich.print(f"""

RUNNING UNIT TESTS IN {unittestdir}
======================================================================
""")
            for unittest in os.listdir(unittestdir):
                rich.print(f"unittest == {unittest}")
                test_log = f"{test_log_dir}/{pkgname}_{unittest}_unittest.log"
                unittest_path = f"{unittestdir}/{unittest}"
                unittest_relpath = os.path.relpath(unittest_path, BASEDIR)
                if which(unittest_path, mode=os.X_OK) is not None:
                    pytee.run("echo", "-e Start of unit test suite {}".format(unittest).split(), test_log)
                    retval = pytee.run(unittest_path, "", test_log)
                    ## Generate test_log_summary now
                    f_test_log = open(test_log, 'r')
                    test_result = re.findall(r'\*\*\* (No errors detected)', f_test_log.read())
                    f_test_log.close()
                    if len(test_result) == 0:
                        echo_result = f"-e {unittest_relpath:.<70}FAILURE"
                    else:
                        # each individual log file should contain one "*** n failure" string at most.
                        echo_result = f"-e {unittest_relpath:.<70}SUCCESS"
                    pytee.run("echo", echo_result.split(), test_log_summary)
                    num_unit_tests += 1

            rich.print(f"[yellow]Testing complete for package \"{pkgname}\". Ran {num_unit_tests} unit test suites.[/yellow]")
            rich.print("")

if args.lint:
    os.chdir(BASEDIR)

    stringio_obj8 = io.StringIO()
    sh.date(_out=stringio_obj8)
    datestring=re.sub("[: ]+", "_", stringio_obj8.getvalue().strip())

    if not os.path.exists("styleguide"):
        rich.print(f"Cloning styleguide into {os.getcwd()} so linting can be applied")
        sh.git("clone", "https://github.com/DUNE-DAQ/styleguide.git")

        if not os.path.exists("styleguide"):
            error("There was a problem cloning the styleguide repo needed for linting into {}".format(os.getcwd()))

    code_to_lint_is_a_file = False

    if args.lint == "all":
        stringio_obj9 = io.StringIO()
        sh.find("-L build -mindepth 1 -maxdepth 1 -type d -not -name CMakeFiles".split(), _out = stringio_obj9)
        package_list = stringio_obj9.getvalue().split()
    elif not re.search(r"\.", code_to_lint):  # No dot means we imagine it's a repo, not a filename
        package_list = [ code_to_lint ]
    else:
        code_to_lint_is_a_file = True

    if not code_to_lint_is_a_file:    
       lint_log_dir=f"{LOGDIR}/linting_{datestring}"
       os.mkdir(lint_log_dir)
       for pkgdir in package_list:
           pkgname=os.path.basename(pkgdir)
           rich.print(f"Package to lint is {pkgname}")
           fullcmd = f"./styleguide/cpplint/dune-cpp-style-check.sh build sourcecode/{pkgname}"
           lint_log = f"{lint_log_dir}/{pkgname}_linting.log"
           retval = pytee.run(fullcmd.split()[0], fullcmd.split()[1:], lint_log)
           if retval != 0:
              error(f"There was a problem linting package \"{pkgname}\". Exiting...")
    else:
       if not code_to_lint[0] == "/":  # Not an absolute path, a relative path
           code_to_lint=orig_working_dir + "/" + code_to_lint
       if not os.path.exists(code_to_lint):
           error(f"Unable to find file \"{code_to_lint}\" to lint; exiting...")     
       rich.print(f"File to lint is {code_to_lint}")
       fullcmd = f"./styleguide/cpplint/dune-cpp-style-check.sh build {code_to_lint}"       
       retval = pytee.run(fullcmd.split()[0], fullcmd.split()[1:], None)
       if retval != 0:
          error(f"There was a problem linting the file \"{code_to_lint}\". Exiting...")

rich.print("")
if cfggentime is not None:
    rich.print(f"CMake's build file config+generate stages took {cfggentime} seconds")
    rich.print(f"Start time: {starttime_cfggen_d}")
    rich.print(f"End time:   {endtime_cfggen_d}")
else:
    rich.print(f"CMake's build file config+generate stages were skipped as the needed build files already existed")

rich.print("")
rich.print(f"CMake's build+install stages took {buildtime} seconds")
rich.print(f"Start time: {starttime_build_d}")
rich.print(f"End time:   {endtime_build_d}")

if num_estimated_warnings == 0:
    pass   # Avoiding screen clutter more important than making developers feel good
elif num_estimated_warnings > 0:
    rich.print("")
    rich.print(f"The build found an estimated {num_estimated_warnings} warnings")
    rich.print("")
else:
    rich.print(f"[yellow]WARNING: unable to estimate the number of warnings from the logfile \"{build_log}\"; manual inspection may help.[/yellow]")

testinfo = ""
if run_tests:
    testinfo=f"""
Unit test summary can be found in {test_log_summary}.
Detailed unit test results are saved in the following directory:
{test_log_dir}
"""

lintinfo = ""
if args.lint and not code_to_lint_is_a_file:    
    lintinfo=f"""
Automated code linting results can be found in the following directory:
{lint_log_dir}.
"""

rich.print(f"""
This script is ending normally. This implies your code successfully compiled; to see
build details you can either scroll up or run the following:

less -R {build_log}

{testinfo}
{lintinfo}
""")

