#!/usr/bin/env python3

import glob
import os
import subprocess
import sys
import yaml

if "DBT_ROOT" in os.environ:
   DBT_ROOT=os.environ["DBT_ROOT"]
else:
    print("Environment variable DBT_ROOT isn't set, which suggests you haven't yet set up the daq-buildtools environment. Exiting...")
    sys.exit(1)


sys.path.append(f'{DBT_ROOT}/scripts')
from dbt_setup_tools import error, run_command

this_script = os.path.basename(__file__)

def env_check():
    if not "SPACK_ROOT" in os.environ:
        error("It doesn't appear Spack was set up; exiting...")

def get_target_dir(package):
   res = subprocess.Popen(f"realpath $(spack location -p {package})/../..", 
                          shell=True, stdout=subprocess.PIPE,
                          stderr=subprocess.PIPE)

   errlines = res.stderr.readlines()
   assert len(errlines) == 0, "".join( [l.rstrip().decode("utf-8") for l in errlines] )

   return res.stdout.readlines()[0].rstrip().decode("utf-8")   

def get_release_data(package):        
   
   target_dir = get_target_dir(package)
    
   yamlfiles = [filename for filename in glob.glob(f"{target_dir}/*.yaml") if os.path.basename(filename) != "repo.yaml"]
    
   assert len(yamlfiles) == 1, f"Unable to find expected yaml file in {target_dir}"
   return yaml.safe_load(open(yamlfiles[0]))

def release_help():
    print(f"\n{this_script} release  # No additional arguments")

def release_info():

    releasedata = get_release_data("dunedaq")

    base_release = releasedata["release"]
    target_dir = "Error"

    if "FD" in os.environ["SPACK_RELEASE"] or "fd" in os.environ["SPACK_RELEASE"]:
        releasedata = get_release_data("fddaq")
        target_dir = get_target_dir("fddaq")
    elif "ND" in os.environ["SPACK_RELEASE"] or "nd" in os.environ["SPACK_RELEASE"]:
        releasedata = get_release_data("nddaq")
        target_dir = get_target_dir("nddaq")
    else:
        assert False

    full_release = releasedata["release"]
    full_release_type = releasedata["type"]
    
    pos = target_dir.find(full_release)
    release_dir = target_dir[:pos + len(full_release)]

    print(f"Release type: {full_release_type}")
    print(f"Release name: {full_release}")
    print(f"Base release name: {base_release}")
    print(f"Release dir: {release_dir}")
    
                           

def package_help():
    print(f"\n{this_script} package <name of package>  # Use \"all\" instead of a package name for all DUNE DAQ packages")

def package_print(pkg):
   print()  
   run_command("spack find -p -l --loaded %s" % (pkg["name"]))
   for vartype in pkg.keys():
      print(f"{vartype}: {pkg[vartype]}")

def package_info(args):
   requested_pkg=args[0]

   base_data = get_release_data("dunedaq")

   if "FD" in os.environ["SPACK_RELEASE"] or "fd" in os.environ["SPACK_RELEASE"]:
      is_fd = True 
   elif "ND" in os.environ["SPACK_RELEASE"] or "nd" in os.environ["SPACK_RELEASE"]: 
      is_fd = False               
   else:
      error("Unable to determine if this release is for the far detector or the near detector; exiting...")

   if is_fd:
      fd_or_nd_data = get_release_data("fddaq")
   else:
      fd_or_nd_data = get_release_data("nddaq")

   for pkg in base_data["dunedaq"]:
      if pkg["name"] == requested_pkg or requested_pkg == "all":
         package_print(pkg)
         if requested_pkg != "all":
             return

   if is_fd:
      datakey = "fddaq"
   else:
      datakey = "nddaq"

   for pkg in fd_or_nd_data[ datakey ]:
      if pkg["name"] == requested_pkg or requested_pkg == "all":
         package_print(pkg)
         if requested_pkg != "all":
            return
 
def externals_help():
    print(f"\n{this_script} external <name of package>  # Use \"all\" instead of a package name for all external packages") 

def externals_info(args): 
   requested_pkg=args[0]
   externals_data = get_release_data("externals")  # Honestly, any externals package name would work here
   
   for pkg in externals_data["externals"]:
      if pkg["name"] == requested_pkg or requested_pkg == "all":
         package_print(pkg)
         if requested_pkg != "all":
            return

def full_help():
    release_help()
    package_help()
    externals_help()

env_check()

if len(sys.argv) == 1:
    full_help()
    sys.exit(1)

infotype = sys.argv[1]

if infotype == "package":
    package_info(sys.argv[2:])
elif infotype == "external":
    externals_info(sys.argv[2:])
elif infotype == "release":
    release_info()
else:  # This encompasses when a user passes "-h" or "--help", but also "--smurf" or "--albania"
    full_help()


